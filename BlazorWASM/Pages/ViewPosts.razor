@page "/ViewPosts"
@using Models
@using HttpClients.ClientInterfaces
@using UIComponents
@using Models.DTO
@inject IPostService postService
@inject NavigationManager navMgr
@attribute [Authorize]

<h3>Posts</h3>
<div class="filter-bar">
    <div class="filters-container">
        <img src="icons/@(doShowFilters ? "clear_" : "")funnel.png" class="funnel" @onclick="@(() => doShowFilters = !doShowFilters)" alt="Funnel" />
        @if (doShowFilters)
        {
            <div class="filter">
                <label>Username:</label>
                <input type="text" @bind="usernameFilter" @bind:after="OnInitializedAsync" />
            </div>
            <div class="filter">
                <label>User id:</label>
                <input type="number" @bind="userIdFilter" @bind:after="OnInitializedAsync" />
            </div>
            <div class="filter">
                <label>Title contains:</label>
                <input type="text" @bind="titleContainsFilter" @bind:after="OnInitializedAsync" />
            </div>
        }
    </div>
</div>


@if (posts == null)
{
}
else if (!posts.Any())
{
    <p>No Posts to display</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Post ID</th>
                <th>Owner ID</th>
                <th>Title</th>
                <th>Body</th>
                <th>Edit</th>
                <th>Delete?</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in posts)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Owner.UserName</td>
                    <td>@item.Title</td>
                    <td @onclick="@(() => navMgr.NavigateTo($"/OpenPost/{item.Id}"))" > Check the post! </td>
                    <td>
                        <img src="icons/edit.gif" class="funnel" @onclick="@(() => navMgr.NavigateTo($"/EditPost/{item.Id}"))" />
                    </td>
                    <td>
                        <label @onclick="@(() => RemovePost(item.Id))" style="cursor:pointer; color: red; font-weight: bold">
                            &#x2717;
                        </label>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}

@code {
    private IEnumerable<Post>? posts;
    private string msg = "";
    private bool doShowFilters = false;

    private string? usernameFilter;
    private int? userIdFilter;
    private string? titleContainsFilter;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            posts = await postService.GetAsync(usernameFilter, userIdFilter,titleContainsFilter);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    private async Task RemovePost(int postId)
    {
        msg = "";
        try
        {
            await postService.DeleteAsync(postId);

            var list = new List<Post>(posts!);
            list.RemoveAll(post => post.Id == postId);
            posts = list.AsEnumerable();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}
